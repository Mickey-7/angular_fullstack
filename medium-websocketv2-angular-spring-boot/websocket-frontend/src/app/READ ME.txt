reference : https://medium.com/@haseeamarathunga/create-a-spring-boot-angular-websocket-using-sockjs-and-stomp-cb339f766a98

---------------------------------------------------------------------------------------------------------------------------

install the needed npm,

        npm i sockjs-client
        npm i stompjs
        npm i net

---------------------------------------------------------------------------------------------------------------------------

create service,

    npx ng g s service/message

        import { Injectable } from "@angular/core";
        // manually imported
        import * as SockJS from "sockjs-client";
        import * as Stomp from "stompjs";

        @Injectable({
        providedIn: "root",
        })
        export class MessageService {
        public stompClient;
        public msg = [];

        initializeWebClient() {
            const serverUrl = "http://localhost:8081/socket";
            const ws = new SockJS(serverUrl);
            this.stompClient = Stomp.over(ws);
            const that = this;
            this.stompClient.connect({}, function (frame) {
            that.stompClient.subscribe("/message", (message) => {
                if (message.body) {
                that.msg.push(message.body);
                }
            });
            });
        }

        constructor() {
            this.initializeWebClient();
        }

        sendMessage(message) {
                this.stompClient.send("/app/send/message", {}, message);
            }
        }

    Inside of InitializeWebSocketConnection() method first create a SockJS server 
    with created back-end endpoint called /socket and added it over Stomp. 
    
    Then connect to stomp client and subscribe that created message 
    broker called ‘message’ asynchronously with stomp client and if 
    is there any message it will push that message body into msg array. 
    
    This method is called inside of constructor() because it is the initialize method of that service.
    That sendMessage() is used to send a message to that message broker called ‘message’ using stomp client.

---------------------------------------------------------------------------------------------------------------------------

Let’s move to app.component.ts

    import { Component } from "@angular/core";
    import { MessageService } from "./service/message.service";

    @Component({
    selector: "app-root",
    templateUrl: "./app.component.html",
    styleUrls: ["./app.component.css"],
    })
    export class AppComponent {
    title = "websocket-frontend";

    input;

    constructor(public messageService: MessageService) {}

    sendMessage() {
        if (this.input) {
        this.messageService.sendMessage(this.input);
        this.input = "";
        }
    }
    }

    In here I defined a variable called input to bind data from html input and if that 
    input value is not empty it will called the sendMessage() of Message Service.

---------------------------------------------------------------------------------------------------------------------------

app.component.html

    <h3>FUCK</h3>
    <input type="text" placeholder="message" [(ngModel)]="input" />
    <button (click)="sendMessage()">Send</button>
    <div>
    <div *ngFor="let msg of messageService.msg">
        {{ msg }}
    </div>
    </div>

    Here, I use ngModel to two way binding of input field data and called the 
    sendMessage() if the send button and view the msg of Messages Service in content.

    So you can test the application with two browser or two tabs as below.

---------------------------------------------------------------------------------------------------------------------------

error:
    on web browser devtools,    

    Uncaught ReferenceError: global is not defined at Object../node_modules/sockjs

    solution:
    
    https://github.com/sockjs/sockjs-client/issues/439
    
        <script>
        var global = window;
        </script>
    
    see index.html for implementation

---------------------------------------------------------------------------------------------------------------------------
